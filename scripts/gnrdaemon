#!/usr/bin/env python2.7
# encoding: utf-8
# 
from gnr.core.gnrsys import expandpath
from gnr.core.gnrbag import Bag

from time import time,sleep, localtime, strftime
from multiprocessing import Process, Pipe
from gnr.web.gnrwsgisite_proxy.gnrsiteregister import GnrSiteRegisterServer

import os


import argparse
import Pyro4

PYRO_HOST = 'localhost'
PYRO_PORT = 40004
PYRO_HMAC_KEY = 'supersecretkey'

def createSiteRegister(sitename=None,daemon_uri=None,host=None,hmac_key=None,debug=None):
    print 'creating'
    server = GnrSiteRegisterServer(sitename=sitename,daemon_uri=daemon_uri,debug=debug)
    print 'starting'
    server.start(host=host,hmac_key=hmac_key,port='*')

class GnrDaemon(object):
    def __init__(self):
        self.running = False
        self.siteregisters= dict()
        self.siteregisters_uri = dict()


    def start(self,host=None,port=None,hmac_key=None,
                      debug=False,compression=False,timeout=None,
                      multiplex=False,polltimeout=None):
        self.pyroConfig(host=host,port=port,hmac_key=hmac_key,debug=debug,
                        compression=compression,timeout=timeout,
                        multiplex=multiplex,polltimeout=polltimeout)
                        
        self.daemon = Pyro4.Daemon(host=self.host,port=int(self.port))
        self.main_uri = self.daemon.register(self,'GnrDaemon')
        print "uri=",self.main_uri
        self.running = True
        self.daemon.requestLoop(lambda : self.running)
        
    def pyroConfig(self,host=None,port=None,hmac_key=None,
                      debug=False,compression=False,timeout=None,
                      multiplex=False,polltimeout=None):
        Pyro4.config.SERIALIZERS_ACCEPTED.add('pickle')
        self.port=port or PYRO_PORT
        self.host = host or PYRO_HOST
        self.hmac_key = str(hmac_key or PYRO_HMAC_KEY)
        Pyro4.config.HMAC_KEY = self.hmac_key
        if compression:
            Pyro4.config.COMPRESSION = True
        if multiplex:
            Pyro4.config.SERVERTYPE = "multiplex"
        if timeout:
            Pyro4.config.TIMEOUT = timeout
        if polltimeout:
            Pyro4.config.POLLTIMEOUT = timeout
    
    def registerSiteName(self,sitename,site_uri):
        self.siteregisters_uri[sitename] = site_uri
        print 'registered ',sitename,site_uri
        
    def ping(self):
        return 'ping'
    
    def getSiteUri(self,sitename=None,create=False):
        if sitename in self.siteregisters_uri:
            return self.siteregisters_uri[sitename]
        elif create:
            self.addSiteRegister(sitename)
            return False
        
    def stop(self):
        self.processManager.stop()
        self.running = False
    
    def addSiteRegister(self,sitename):
        if not sitename in self.siteregisters:
            print 'adding sitename',sitename
            childprocess = Process(name='sr_%s' %sitename, target=createSiteRegister,kwargs=dict(sitename=sitename,daemon_uri=self.main_uri,host=self.host,hmac_key=self.hmac_key))
            self.siteregisters[sitename] = childprocess
            self.siteregisters_uri[sitename] = False
            childprocess.daemon = True
            childprocess.start()
        else:
            print 'ALREADY EXISTING ',sitename
    
    def listSiteRegisters(self):
        return self.siteregisters.keys()

    def listSiteRegistersUri(self):
        return self.siteregisters_uri.items()

def getOptions():
    usage = "\ngnrdaemon"
    parser = argparse.ArgumentParser(usage)
          
    parser.add_argument('-H', '--host',
                      help="The binded host")
                      
    parser.add_argument('-P', '--port',
                      help="The binded port" ,type=int)
                      
    parser.add_argument('-K', '--hmac_key',
                      help="The secret key")
                      
    parser.add_argument('-t', '--timeout',type=float,
                      help="Timeout")

    parser.add_argument('-m', '--multiplex',action='store_false',
                      help="Use multiplexed server")
                      
    parser.add_argument('--polltimeout',type=float,
                      help="Use multiplexed server poll timeout")

    parser.add_argument('-d', '--debug',
                      action='store_false',
                      help="Debug mode")
                      
    parser.add_argument('-c', '--compression',
                      action='store_false',
                      help="Enable compression")

    arguments= parser.parse_args()
    return arguments.__dict__
    
    

if __name__=="__main__":
    curropt = getOptions()
    options = Bag(expandpath('~/.gnr/environment.xml')).getAttr('gnrdaemon')
    assert options,"Missing gnrdaemon configuration."
    for k,v in curropt.items():
        if v:
            options[k] = v
    server = GnrDaemon()
    server.start(**options)