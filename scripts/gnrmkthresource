#!/usr/bin/env python
# encoding: utf-8

"""
create a new genroproject
usage: gnrmkproject projectname

"""
import sys, os, shutil

from gnr.core.gnrbag import Bag
from gnr.app.gnrapp import GnrApp
from optparse import OptionParser
from gnr.core.gnrlang import uniquify
from collections import defaultdict

global DEFAULT_INDENT

def write(out_file, line=None, indent=0):
    line = line or ''
    out_file.write('%s%s\n'%(DEFAULT_INDENT*indent*' ',line))

def writeHeaders(out_file):
    write(out_file, '#!/usr/bin/python')
    write(out_file, '# -*- coding: UTF-8 -*-')
    write(out_file)
    
def writeImports(out_file):
    write(out_file, "from gnr.web.gnrbaseclasses import BaseComponent")
    write(out_file, "from gnr.core.gnrdecorator import public_method")
    write(out_file)
    write(out_file)
    
def writeViewClass(out_file, columns):
    write(out_file, "class View(BaseComponent):")
    write(out_file)
    write(out_file, "def th_struct(self,struct):", indent=1)
    write(out_file, 'r = struct.view().rows()', indent=2)
    for column, size in columns:
        write(out_file, "r.fieldcell('%s',width='%iem')"%(column,size), indent=2)
    write(out_file, "return struct", indent=2)
    write(out_file)
    write(out_file, "def th_order(self):", indent=1)
    write(out_file, "return '%s'"%columns[0][0], indent=2)
    write(out_file)
    write(out_file, "def th_query(self):", indent=1)
    write(out_file, "return dict(column='%s',op='contains', val='%%')"%columns[0][0], indent=2)
    write(out_file)
    write(out_file)
    write(out_file)
    
def writeFormClass(out_file, columns):
    write(out_file, "class Form(BaseComponent):")
    write(out_file)
    write(out_file, "def th_form(self, form):", indent=1)
    write(out_file, "pane = form.record", indent=2)
    write(out_file, "fb = pane.formbuilder(cols=1,border_spacing='4px')", indent=2)
    for column, size in columns:
        write(out_file, "fb.field('%s')"%column, indent=2)
    write(out_file)
    write(out_file)
    write(out_file, "def th_options(self):", indent=1)
    write(out_file, "return dict(dialog_height='400px',dialog_width='600px')", indent=2)
    
def createResourceFile(app, package, table, option_name, option_output, option_force):
    packageFolder = app.packages(package).packageFolder
    resourceFolder = os.path.join(packageFolder,'resources', 'tables', table)
    if not os.path.exists(resourceFolder) and not option_output:
        os.makedirs(resourceFolder)
    if option_name and not option_name.endswith('.py'):
        option_name = '%s.py'%option_name
    name = option_name or 'th_%s.py'%table
    path = os.path.join(resourceFolder, name) if not option_output else option_output
    if os.path.exists(path) and not option_force:
        print '%s exist: will be skipped, use -f/--force to force replace' % name
        return
    columns = []
    max_size = 35
    tbl_obj =  app.db.table('%s.%s'%(package,table))
    for col_name in tbl_obj.columns:
        if col_name=='id' or col_name.startswith('__'):
            continue
        column = tbl_obj.columns[col_name]
        if column.dtype=='A':
            size = column.attributes.get('size','')
            if size:
                if ':' in size:
                    size =size.split(':')[1]
            else:
                size=max_size
            size = max(int(size),max_size)
        else:
            size = 7
        columns.append((column.name,size))
    with open(path,'w') as out_file:
        writeHeaders(out_file)
        writeImports(out_file)
        writeViewClass(out_file, columns)
        writeFormClass(out_file, columns)
        print '%s created' % name
        

if __name__ == '__main__':
    usage = """
    gnrmkthresource is used to create
    tablehandler resources automatically from model.
    
    - the first parameter is a table name in the form: package_name.table_name
    - pkgname may be in the form: project_name:package_name
    """
    parser = OptionParser(usage)
    parser.add_option("-f", "--force", dest="force", action='store_true', default=False,
                      help="force the resource creation also if destination file exists")
    parser.add_option("-n", "--name", dest="name", 
                      help="output file name, the file will be, will work only if single table is passed")
    
    parser.add_option("-o", "--output", dest="output",
                      help="""output file path will override -n/--name and automatic file placement in resources/tables/tablename, 
                              will work only if single table is passed""")
    parser.add_option("-i", "--indent", dest="indent", default=4,
                       help="output file name, the file will be, will work only if single table is passed")

    
    (options, args) = parser.parse_args()
    option_force = getattr(options, 'force', False)
    option_name = getattr(options, 'name', None)
    option_output = getattr(options, 'create_instance', None)
    option_indent = getattr(options, 'indent', 4)
    global DEFAULT_INDENT 
    DEFAULT_INDENT = int(option_indent)
    if not args:
        parser.print_help()
    else:
        packages = dict()
        pkg_tables = defaultdict(list)
        for table_name in args:
            if '.' in table_name:
                full_pkg_name, table_name = table_name.split('.')
            else:
                full_pkg_name = table_name
                table_name = '*'
            packages[full_pkg_name]=True
            if ':' in full_pkg_name:
                pkg_name = full_pkg_name.split(':')[1]
            else:
                pkg_name = full_pkg_name
            pkg_tables[pkg_name].append(table_name)
        config=Bag()
        config['db']=None
        for pkg in packages:
            config['packages.%s'%pkg]=None
        app=GnrApp(custom_config=config)
        tables=[]
        for pkg, tbl_names in pkg_tables.items():
            for tbl_name in tbl_names:
                if tbl_name=='*':
                    tables.extend([(pkg,t) for t in list(app.db.package(pkg).tables)])
                    break
                else:
                    tables.append((pkg,tbl_name))
        tables = uniquify(tables)
        if len(tables)>1 and (option_output or option_name):
            if option_name:
                print '-n/--name option is incompatible with multiple table mode'
            if option_name:
                print '-o/--output option is incompatible with multiple table mode'
            exit(-1)
        for package,table in tables:
            createResourceFile(app, pkg, table, option_name, option_output, option_force)
        
    