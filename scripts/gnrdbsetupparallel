#!/usr/bin/env python
# encoding: utf-8
import os
from gnr.app.gnrapp import GnrApp
from gnr.core.gnrbag import Bag
import optparse
import glob
from gnr.core.gnrsys import expandpath
import sys
import logging
from gnr.core.gnrlog import enable_colored_logging

enable_colored_logging()

S_GNRHOME = os.path.split(os.environ.get('GNRHOME', '/usr/local/genro'))
GNRHOME = os.path.join(*S_GNRHOME)
S_GNRINSTANCES = (os.environ.get('GNRINSTANCES') and os.path.split(os.environ.get('GNRINSTANCES'))) or (
S_GNRHOME + ('data', 'instances'))
GNRINSTANCES = os.path.join(*S_GNRINSTANCES)

usage = """
gnrdbsetup is used to create/update/check
database models in Genro framework
run either in instance directory or 
specify instance name with the -i/--instance flag
with -d/--directory you can specify the instance directory"""

parser = optparse.OptionParser(usage)

parser.add_option('-c', '--check',
                  dest='check',
                  action='store_true',
                  help="Check only, don't apply changes")

parser.add_option('-v', '--verbose',
                  dest='verbose',
                  action='store_true',
                  help="Verbose mode")

parser.add_option('-d', '--debug',
                dest='debug',
                action='store_true',
                help="Debug mode")

parser.add_option('-i', '--instance',
                  dest='instance',
                  help="Use command on instance identified by supplied name")

parser.add_option('-D', '--directory',
                  dest='directory',
                  help="Use command on instance identified by supplied directory (overrides -i)")

parser.add_option('-s', '--site',
                  dest='site',
                  help="Use command on instance identified by supplied site")

parser.add_option('-I', '--import',
                  dest='import_file',
                  help="Import specified XML file")

parser.add_option('--config',
                  dest='config_path',
                  help="gnrserve file path")

(options, args) = parser.parse_args()

def site_name_to_path(gnr_config, site_name):
    path_list = []
    if 'sites' in gnr_config['gnr.environment_xml']:
        path_list.extend([expandpath(path) for path in gnr_config['gnr.environment_xml'].digest('sites:#a.path') if
                          os.path.isdir(expandpath(path))])
    if 'projects' in gnr_config['gnr.environment_xml']:
        projects = [expandpath(path) for path in gnr_config['gnr.environment_xml'].digest('projects:#a.path') if
                    os.path.isdir(expandpath(path))]
        for project_path in projects:
            path_list.extend(glob.glob(os.path.join(project_path, '*/sites')))
        for path in path_list:
            site_path = os.path.join(path, site_name)
            if os.path.isdir(site_path):
                return site_path
        raise Exception(
                'Error: no site named %s found' % site_name)

def instance_name_to_path(gnr_config, instance_name):
    path_list = []
    if 'instances' in gnr_config['gnr.environment_xml']:
        path_list.extend([expandpath(path) for path in gnr_config['gnr.environment_xml'].digest('instances:#a.path') if
                          os.path.isdir(expandpath(path))])
    if 'projects' in gnr_config['gnr.environment_xml']:
        projects = [expandpath(path) for path in gnr_config['gnr.environment_xml'].digest('projects:#a.path') if
                    os.path.isdir(expandpath(path))]
        for project_path in projects:
            path_list.extend(glob.glob(os.path.join(project_path, '*/instances')))
        for path in path_list:
            instance_path = os.path.join(path, instance_name)
            if os.path.isdir(instance_path):
                return instance_path
        raise Exception(
                'Error: no instance named %s found' % instance_name)


def load_gnr_config():
    if hasattr(options, 'config_path') and options.config_path:
        config_path = options.config_path
    else:
        if sys.platform == 'win32':
            config_path = '~\gnr'
        else:
            config_path = '~/.gnr'
    config_path = expandpath(config_path)
    if os.path.isdir(config_path):
        return Bag(config_path)
    else:
        return Bag()

def set_environment(gnr_config):
    for var, value in gnr_config['gnr.environment_xml'].digest('environment:#k,#a.value'):
        var = var.upper()
        if not os.getenv(var):
            os.environ[var] = str(value)

def get_app_path_and_store():
    storename = None
    debug = options.debug==True
    if options.directory:
        instance_path = options.directory
        if os.path.isdir(instance_path):
            return instance_path
        else:
            raise Exception("No valid instance provided")
    gnr_config = load_gnr_config()
    set_environment(gnr_config)
    instance_name = options.instance or args[0]
    if instance_name:
        if '.' in instance_name:
            instance_name, storename = instance_name.split('.')
        gnr_config = load_gnr_config()
        instance_path = instance_name_to_path(gnr_config, instance_name)
        if os.path.isdir(instance_path):
            return instance_path, storename
        else:
            raise Exception("No valid instance provided")
    if options.site:
        gnr_config = load_gnr_config()
        site_path = site_name_to_path(gnr_config, options.site)
        if not site_path:
            site_path = os.path.join(gnr_config['gnr.environment_xml.sites?path'] or '', options.site)
        instance_path = os.path.join(site_path, 'instance')
        if os.path.isfile(os.path.join(instance_path, 'instanceconfig.xml')):
            return instance_path, storename
        else:
            raise "No valid instance provided"
    return os.getcwd(), storename


def check_db(app):
    changes = app.db.model.check()
    dbname = app.db.currentEnv.get('storename')
    dbname = dbname or 'Main'
    print 'DB %s:' % dbname
    if changes:
        if options.verbose:
            print '*CHANGES:\n%s' % '\n'.join(app.db.model.modelChanges)
        else:
            print 'STUCTURE NEEDS CHANGES'
    else:
        print 'STRUCTURE OK'
    return changes

def import_db(filepath):
    app = get_app()
    app.db.importXmlData(filepath)
    app.db.commit()

def check_store(args):
    instance_path, storename, options = args
    debug = options.get('debug')==True
    app = GnrApp(instance_path, debug=debug)
    app.db.use_store(storename)
    if options.get('check'):
        check_db(app)
    elif options.get('import_file'):
        import_db(options.get('import_file'))
    else:
        changes = check_db(app)
        if changes:
            print 'APPLYING CHANGES TO DATABASE...'
            app.db.model.applyModelChanges()
            print 'CHANGES APPLIED TO DATABASE'
        app.db.model.checker.addExtesions()

if __name__ == '__main__':
    from multiprocessing import Pool
    p = Pool(6)
    instance_path, storename = get_app_path_and_store()
    #app, storename = get_app()
    if storename == '*':
        app = GnrApp(instance_path)
        stores = [None] + app.db.dbstores.keys()
    else:
        stores = [storename]
    options_dict = options.__dict__
    starstores = [(instance_path,store,options_dict) for store in stores]
    p.map(check_store,starstores)
    #for storename in stores:
    #    check_store(app,storename, options)
        

