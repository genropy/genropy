#!/usr/bin/env python
# encoding: utf-8

from gnr.core.gnrbag import Bag
from gnr.app.gnrapp import GnrApp
from gnr.app.gnrconfig import gnrConfigPath, getGnrConfig
from subprocess import Popen
from gnr.web.gnrdaemonhandler import GnrDaemonProxy

from optparse import OptionParser
import re
import os
from time import sleep



APACHE_SITES ='/etc/apache2/sites-enabled/cusl.conf '

UWSGIVASSALFINDER = re.compile('(?:^pyargv *= *)(\w+)$',re.I |re.M)
APACHECONFFINDER = re.compile('(?:WSGIScriptAlias[ /\w]*sites/)(\w*)(?:/root\.py)$',re.I |re.M)

class BaseUpdater(object):
    def __init__(self,instances=None,keep=None):
        self.instances = self.getInstances()
        self.keepStatus = keep
        self.daemonProxy = GnrDaemonProxy(use_environment=True)
        self.stoppedStatus = None
        if instances:
            self.instances = [inst for inst in instances.split(',') if inst in self.instances]
        #self.vassals_path = os.path.join(self.gnr_path, 'uwsgi', 'vassals')

    def instanceBroadcast(self,cb,**kwargs):
        if not isinstance(cb,list):
            cb = [cb]
        for instance in self.instances:
            print 'Instance ',instance
            for callback in cb:
                callback(instance,**kwargs)

    def dbsetup(self,instance=False,upgrade=None):
        app = GnrApp(instance)
        print '\t running dbsetup'
        changes = self.check_db(app)
        if changes:
            print 'APPLYING CHANGES TO DATABASE...'
            app.db.model.applyModelChanges()
            print 'CHANGES APPLIED TO DATABASE'
        if upgrade:
            app.upgrade()
        app.db.closeConnection()

    def gnrdaemon_restart(self,keep=None):
        self.gnrdaemon_stop(keep=keep)
        sleep(.5)
        self.gnrdaemon_start()
    
    def gnrdaemon_stop(self,keep=None):
        with self.daemonProxy.proxy() as p:
            self.stoppedStatus = p.siteregister_stop(self.instances,saveStatus=self.keepStatus)

    def gnrdaemon_start(self):
        with self.daemonProxy.proxy() as p:
            p.siteregister_start(self.stoppedStatus)

    def update(self, skip_dbsetup=False,upgrade=None,keep=None):
        #instances = [os.path.splitext(l)[0] for l in os.listdir(self.vassals_path) if l not in ('gnrdaemon.ini','pg.ini')]
        self.web_stop()
        self.gnrdaemon_stop(keep=keep)
        self.instanceBroadcast(self.dbsetup,upgrade=upgrade)
        self.web_start()
        print 'Update ok'

    def restartAll(self, keep=False):
        #instances = [os.path.splitext(l)[0] for l in os.listdir(self.vassals_path) if l not in ('gnrdaemon.ini','pg.ini')]
        self.web_stop()
        self.gnrdaemon_restart(keep=keep)
        self.web_start()
        print 'Update ok'

class ApacheUpdater(BaseUpdater):
    def __init__(self,**kwargs):
        super(ApacheUpdater,self).__init__(**kwargs)

    def web_stop(self):
        #sudo apache2ctl stop
        Popen(['sudo apache2ctl stop'], shell=True)


    def web_start(self):
        #sudo apache2ctl start
        Popen(['sudo apache2ctl start'], shell=True)

    def getInstances(self):
        result = []
        for filename in os.listdir(APACHE_SITES):
            with open(os.path.join(APACHE_SITES,filename),'r') as f:
                txt = f.read()
                q = APACHECONFFINDER.search(txt)
                result.append(q.group(1))
        return list(set(result))


class UwsgiUpdater(BaseUpdater):
    def __init__(self,**kwargs):
        self.gnr_vassal_options = dict()
        self.gnr_config = getGnrConfig()
        self.gnr_path = gnrConfigPath()
        self.socket_path = os.path.join(self.gnr_path, 'sockets')
        home_path = os.environ.get('HOME', '')
        if home_path.startswith('/containers'):
            default_vassals_path = os.path.join(home_path, 'vassals')
        else:
            default_vassals_path = os.path.join(self.gnr_path, 'uwsgi', 'vassals')
        self.vassals_path = self.gnr_config['gnr.environment_xml.vassals?path'] or default_vassals_path
        #self.vassals_path = os.path.join(self.gnr_path, 'uwsgi', 'vassals')
        for dir_path in (self.socket_path, self.vassals_path):
            if not os.path.exists(dir_path):
                os.makedirs(dir_path)
        super(UwsgiUpdater,self).__init__(**kwargs)

    def getInstances(self):
        result = []
        for filename in os.listdir(self.vassals_path):
            basename, extension = os.path.splitext(filename)
            if basename.lower() in ('gnrdaemon', 'pg') or extension.lower() not in ('.ini', '.off'):
                continue
            with open(os.path.join(self.vassals_path,filename),'r') as f:
                txt = f.read()
                q = UWSGIVASSALFINDER.search(txt)
                if q:
                    result.append(q.group(1))
                else:
                    print filename,txt
        return list(set(result))

    def web_stop(self):
        self.instanceBroadcast(self.stop_vassal)

    def web_start(self):
        self.instanceBroadcast(self.start_vassal)

    def update(self, skip_dbsetup=False,upgrade=None,keep=None):
        #instances = [os.path.splitext(l)[0] for l in os.listdir(self.vassals_path) if l not in ('gnrdaemon.ini','pg.ini')]
        self.web_stop()
        self.instanceBroadcast(self.dbsetup,upgrade=upgrade)
        self.gnrdaemon_restart(keep=keep)
        self.web_start()
        print 'Update ok'


    def restartAll(self, keep=False):
        #instances = [os.path.splitext(l)[0] for l in os.listdir(self.vassals_path) if l not in ('gnrdaemon.ini','pg.ini')]
        self.web_stop()
        self.gnrdaemon_restart(keep=keep)
        self.web_start()
        print 'Update ok'

    def touchonly(self):
        #instances = [os.path.splitext(l)[0] for l in os.listdir(self.vassals_path) if l not in ('gnrdaemon.ini','pg.ini')]
        self.instanceBroadcast(self.restart_vassal)

    def stop_vassal(self,name):
        vassal_start_path = os.path.join(self.vassals_path,'%s.ini' %name)
        vassal_off_path = os.path.join(self.vassals_path, '%s.off' %name)
        if os.path.exists(vassal_start_path):
            os.rename(vassal_start_path, vassal_off_path)
            print "Site %s stopped" % name

    def start_vassal(self,name):
        vassal_start_path = os.path.join(self.vassals_path,'%s.ini' %name)
        vassal_off_path = os.path.join(self.vassals_path, '%s.off' %name)
        if os.path.exists(vassal_off_path):
            os.rename(vassal_off_path, vassal_start_path)
            print "Site %s start" % name

    def restart_vassal(self,name):
        #with open(name,'rw') as f:
        #    filecontent = f.read()
        #    f.write(filecontent)
        #self.stop_vassal(name)
        #sleep(.3)
        #self.start_vassal(name)
        vassal_path = os.path.join(self.vassals_path,'%s.ini' %name)
        if os.path.exists(vassal_path):
            with open(vassal_path, 'a'):
                os.utime(vassal_path,None)
            print "Vassal %s restarted" % name

    def check_db(self,app):
        changes = app.db.model.check()
        dbname = app.db.currentEnv.get('storename')
        dbname = dbname or 'Main'
        print 'DB %s:' % dbname
        if changes:
            print 'STUCTURE NEEDS CHANGES'
        else:
            print 'STRUCTURE OK'
        return changes


class OldUwsgiUpdater(object):
    def __init__(self):
        self.gnr_config = getGnrConfig()
        self.gnr_path = gnrConfigPath()
        self.gnr_vassal_options = dict()
        self.socket_path = os.path.join(self.gnr_path, 'sockets')
        home_path = os.environ.get('HOME', '')
        if home_path.startswith('/containers'):
            default_vassals_path = os.path.join(home_path, 'vassals')
        else:
            default_vassals_path = os.path.join(self.gnr_path, 'uwsgi', 'vassals')
        self.vassals_path = self.gnr_config['gnr.environment_xml.vassals?path'] or default_vassals_path
        #self.vassals_path = os.path.join(self.gnr_path, 'uwsgi', 'vassals')
        self.create_dirs()

    def create_dirs(self):
        for dir_path in (self.socket_path, self.vassals_path):
            if not os.path.exists(dir_path):
                os.makedirs(dir_path)

    def get_config(self):
        site_config_path = os.path.join(self.site_path, 'siteconfig.xml')
        base_site_config = Bag(site_config_path)
        site_config = self.gnr_config['gnr.siteconfig.default_xml'] or Bag()
        template = self.site_template
        if template:
            site_config.update(self.gnr_config['gnr.siteconfig.%s_xml' % template] or Bag())
        site_config.update(base_site_config)
        return site_config

    def getInstances(self):
        result = []
        for filename in os.listdir(self.vassals_path):
            instance, extension = os.path.splitext(filename)
            if instance.lower() in ('gnrdaemon', 'pg') or extension.lower() not in ('.ini', '.off'):
                continue
            result.append(instance)
        return result

    def update(self, skip_dbsetup=False,**kwargs):
        #instances = [os.path.splitext(l)[0] for l in os.listdir(self.vassals_path) if l not in ('gnrdaemon.ini','pg.ini')]
        instances = self.getInstances()
        for s in instances:
            print 'Instance ',s
            self.stop_vassal(s)
            print '\t server stopped'
            if skip_dbsetup:
                sleep(.3)
                continue
            app = GnrApp(s)
            print '\t running dbsetup'
            changes = self.check_db(app)
            if changes:
                print 'APPLYING CHANGES TO DATABASE...'
                app.db.model.applyModelChanges()
                print 'CHANGES APPLIED TO DATABASE'
            else:
                sleep(.3)
            app.db.closeConnection()
            #app.db.model.checker.addExtesions()
            print '\t done'
        self.restart_vassal('gnrdaemon')
        for s in instances:
            print 'starting', s
            self.start_vassal(s)
        print 'Update ok'

    def touchonly(self):
        #instances = [os.path.splitext(l)[0] for l in os.listdir(self.vassals_path) if l not in ('gnrdaemon.ini','pg.ini')]
        for s in self.getInstances():
            print 'Instance ',s
            self.restart_vassal(s)
            print 'restarted',s
        print 'touch ok'

    def stop_vassal(self,name):
        vassal_start_path = os.path.join(self.vassals_path,'%s.ini' %name)
        vassal_off_path = os.path.join(self.vassals_path, '%s.off' %name)
        if os.path.exists(vassal_start_path):
            os.rename(vassal_start_path, vassal_off_path)
            print "Site %s stopped" % name

    def start_vassal(self,name):
        vassal_start_path = os.path.join(self.vassals_path,'%s.ini' %name)
        vassal_off_path = os.path.join(self.vassals_path, '%s.off' %name)
        if os.path.exists(vassal_off_path):
            os.rename(vassal_off_path, vassal_start_path)
            print "Site %s start" % name

    def restart_vassal(self,name):
        with open(name,'rw') as f:
            filecontent = f.read()
            f.write(filecontent)
        #self.stop_vassal(name)
        #sleep(.3)
        #self.start_vassal(name)

        #vassal_path = os.path.join(self.vassals_path,'%s.ini' %name)
        #if os.path.exists(vassal_path):
        #    with open(vassal_path, 'a'):
        #        os.utime(vassal_path,None)
        #    print "Vassal %s restarted" % name

    def check_db(self,app):
        changes = app.db.model.check()
        dbname = app.db.currentEnv.get('storename')
        dbname = dbname or 'Main'
        print 'DB %s:' % dbname
        if changes:
            print 'STUCTURE NEEDS CHANGES'
        else:
            print 'STRUCTURE OK'
        return changes

def main(instances,options):
    if not(options.oldmode or options.apache or options.uwsgi):
        print 'select an option'
        return
        
    if options.skip_dbsetup and options.touchonly:
        print 'Cannot use both --touchonly and --nodbsetup'
        return 
    if options.apache:
        updater = ApacheUpdater(instances=instances)
    elif options.uwsgi:
        updater = UwsgiUpdater(instances=instances)
    else:
        updater = OldUwsgiUpdater()

    if options.touchonly:
        updater.touchonly()
    else:
        updater.update(skip_dbsetup=options.skip_dbsetup,
                        upgrade=options.upgrade,
                        keep=options.keep)


if __name__ == '__main__':
    usage = """
    gnrupdate
    -to, --touchonly avoid dbsetup
    """

    parser = OptionParser(usage)
    parser.add_option('--touchonly',
                  dest='touchonly',
                  action='store_true',
                  help="Touch all vassals, doesn't restart daemon, skips dbsetup")
    parser.add_option('--nodbsetup',
                  dest='skip_dbsetup',
                  action='store_true',
                  help="Touch all vassals and gnrdaemon, skips dbsetup")
    parser.add_option('--upgrade',
                  dest='data_upgrade',
                  action='store_true',
                  help="Run upgrade scripts")
    parser.add_option('--keep',
                  dest='keep',
                  action='store_true',
                  help="Save gnrdaemon connections")
    parser.add_option('--apache',
                  dest='apache',
                  action='store_true',
                  help="Apache")
    parser.add_option('--uwsgi',
                  dest='uwsgi',
                  action='store_true',
                  help="Uwsgi")
    parser.add_option('--oldmode',
                  dest='oldmode',
                  action='store_true',
                  help="Oldmode")           
    (options, args) = parser.parse_args()
    instances = args[0] if args else None
    main(instances,options)

  #if options.skip_dbsetup and options.touchonly:
  #    print 'Cannot use both --touchonly and --nodbsetup'
  #if not options.get()
  #updater = UwsgiUpdater()

  #elif options.skip_dbsetup:
  #    updater.update(skip_dbsetup=True)
  #elif options.touchonly:
  #    updater.touchonly()
  #else:
  #    updater.update()
