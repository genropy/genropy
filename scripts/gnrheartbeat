#!/usr/bin/env python
# encoding: utf-8
from gnr.core.gnrbag import Bag
import optparse
from gnr.core.gnrsys import expandpath
import sys
import os
import glob
import urllib
import time
usage = """
gnrheartbeat"""

parser = optparse.OptionParser(usage)

parser.add_option('-v', '--verbose',
                  dest='verbose',
                  action='store_true',
                  help="Verbose mode")

parser.add_option('-s', '--site',
                  dest='site',
                  help="Use command on instance identified by supplied site")

parser.add_option('--config',
                  dest='config_path',
                  help="gnrserve file path")

parser.add_option('--interval',
                dest='interval',
                default=60,
                help="Heartbeat interval (in seconds)")

(options, args) = parser.parse_args()

def site_name_to_path(gnr_config, site_name):
    path_list = []
    if 'sites' in gnr_config['gnr.environment_xml']:
        path_list.extend([expandpath(path) for path in gnr_config['gnr.environment_xml'].digest('sites:#a.path') if
                          os.path.isdir(expandpath(path))])
    if 'projects' in gnr_config['gnr.environment_xml']:
        projects = [expandpath(path) for path in gnr_config['gnr.environment_xml'].digest('projects:#a.path') if
                    os.path.isdir(expandpath(path))]
        for project_path in projects:
            path_list.extend(glob.glob(os.path.join(project_path, '*/sites')))
        for path in path_list:
            site_path = os.path.join(path, site_name)
            if os.path.isdir(site_path):
                return site_path
        raise Exception(
                'Error: no site named %s found' % site_name)


def load_gnr_config():
    if hasattr(options, 'config_path') and options.config_path:
        config_path = options.config_path
    else:
        if sys.platform == 'win32':
            config_path = '~\gnr'
        else:
            config_path = '~/.gnr'
    config_path = expandpath(config_path)
    if os.path.isdir(config_path):
        return Bag(config_path)
    else:
        return Bag()

def set_environment(gnr_config):
    for var, value in gnr_config['gnr.environment_xml'].digest('environment:#k,#a.value'):
        var = var.upper()
        if not os.getenv(var):
            os.environ[var] = str(value)



def get_site_config( site_path, gnr_config):
    site_config_path = os.path.join(site_path, 'siteconfig.xml')
    base_site_config = Bag(site_config_path)
    site_config = gnr_config['gnr.siteconfig.default_xml'] or Bag()
    template = site_config['site?template'] 
    if template:
        site_config.update(gnr_config['gnr.siteconfig.%s_xml' % template] or Bag())
    if 'sites' in gnr_config['gnr.environment_xml']:
        for path, site_template in gnr_config.digest('gnr.environment_xml.sites:#a.path,#a.site_template'):
            if path == os.path.dirname(site_path):
                site_config.update(gnr_config['gnr.siteconfig.%s_xml' % site_template] or Bag())
    site_config.update(Bag(site_config_path))
    return site_config

def get_site_url(site_name):
    gnr_config = load_gnr_config()
    set_environment(gnr_config)
    if site_name:
        gnr_config = load_gnr_config()
        site_path = site_name_to_path(gnr_config, site_name)
        if not site_path:
            site_path = os.path.join(gnr_config['gnr.environment_xml.sites?path'] or '', site_name)
        if not site_path:
            print 'no site named %s found'%site_name
            exit(-1)
        else:
            site_config = get_site_config(site_path, gnr_config)
            return 'http://localhost:%s'%site_config['wsgi?port']
        
if __name__ == '__main__':
    site_name = options.site or args[0]
    if not site_name.startswith('http://') or site_name.startswith('https://'):
        site_url=get_site_url(site_name)
    else:
        site_url=site_name
    url = "%s/task/heartbeat"%site_url
    while True:
        if options.verbose:
            print 'Calling url %s'%url
        try:
            response = urllib.urlopen(url)
            response_code = response.getcode()
            if response_code!=200:
                if options.verbose:
                    print 'Response code: %s'%response_code
            time.sleep(options.interval)
        except IOError:
            print 'IOError -> will retry in %i seconds'%(3*options.interval)
            time.sleep(3*options.interval)
        
        