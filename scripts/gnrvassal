#!/usr/bin/env python
# encoding: utf-8



from gnr.core.gnrbag import Bag
from optparse import OptionParser
from gnr.app.gnrconfig import gnrConfigPath, getSiteHandler, getGnrConfig
import os
from gnr.core.gnrstring import boolean

wsgi_options = dict(
        port=8080,
        host='0.0.0.0',
        reload=False,
        debug=True,
        restore=False,
        profile=False,
        noclean=False,
        source_instance=None,
        remote_edit=None,
        remotesshdb=None,
        gzip=None,
        processes=1,
        threads=1,
        offload_threads=None,
        stats_port=None,
        websockets=False
        )



class UwsgiConfigurator(object):
    default_port = 8080
    default_processes = 1
    default_threads = 8
    vassal_template = """[uwsgi]
plugins = python,router_http
%(port_or_domain)s
gid = %(gid)i
uid = %(uid)i
processes = %(processes)i
threads = %(threads)i
enable-threads = true
;stats = 127.0.0.1:%(stats_port)i
worker-reload-mercy = 1
disable-logging = true
module = gnr.web.serveruwsgi
pyargv = %(site_name)s
offload-threads = %(offload_threads)i
wsgi-env-behaviour = holy
pidfile = %(pidfile_path)s
logto = %(logto)s
%(websockets)s
[genropy]
%(gnr_vassal_options)s
"""

    def __init__(self, site_name, options=None, verbose=None):
        self.site_name = site_name
        self.site_handler = getSiteHandler(site_name)
        self.site_path = self.site_handler['site_path']
        self.error_path = os.path.join(self.site_path, 'error.log')
        self.site_template = self.site_handler['site_template']
        self.site_script = self.site_handler['site_script']
        self.gnr_config = getGnrConfig()
        self.site_config = self.get_config()
        self.gnr_path = gnrConfigPath()
        self.gnr_vassal_options = dict()
        self.socket_path = os.path.join(self.gnr_path, 'sockets')
        home_path = os.environ.get('HOME', '')
        if home_path.startswith('/containers'):
            default_vassals_path = os.path.join(home_path, 'vassals')
        else:
            default_vassals_path = os.path.join(self.gnr_path, 'uwsgi', 'vassals')
        self.vassals_path = self.gnr_config['gnr.environment_xml.vassals?path'] or default_vassals_path
        #self.vassals_path = os.path.join(self.gnr_path, 'uwsgi', 'vassals')
        self.pidfile_path = os.path.join(self.vassals_path, '%s.pid' % site_name)
        self.vassal_ini_path = os.path.join(self.vassals_path, '%s.ini' % site_name)
        self.websocket_socket_path = os.path.join(self.socket_path, '%s.tornado' % site_name)
        self.create_dirs()

        self.verbose = verbose
        self.options = options
        self.init_options()

    def init_options(self):
        options = self.options.__dict__
        for option in wsgi_options.keys():
            if options.get(option, None) is None: # not specified on the command-line
                site_option = self.site_config['wsgi?%s' % option]
                value = site_option or wsgi_options.get(option)
                self.options.__dict__[option] = value
            else:
                if value is not None:
                    self.gnr_vassal_options[option] = value

    def create_dirs(self):
        for dir_path in (self.socket_path, self.vassals_path):
            if not os.path.exists(dir_path):
                os.makedirs(dir_path)

    def get_config(self):
        site_config_path = os.path.join(self.site_path, 'siteconfig.xml')
        base_site_config = Bag(site_config_path)
        site_config = self.gnr_config['gnr.siteconfig.default_xml'] or Bag()
        template = self.site_template
        if template:
            site_config.update(self.gnr_config['gnr.siteconfig.%s_xml' % template] or Bag())
        site_config.update(base_site_config)
        return site_config

    def write_ini(self):
        if os.path.exists(self.vassal_ini_path):
            print "site %s is already enabled, stop it using gnrvassal %s --stop"%(self.site_name, self.site_name)
        pars = dict()
        #sc = self.site_config
        opt = self.options
        port = int(opt.port or self.default_port)
        if hasattr(opt,'domain') and opt.domain:
            pars['port_or_domain'] = 'domain = %s'%opt.domain
        else:
            pars['port_or_domain'] = 'http = :%i'%port
        pars['wsgi_file'] = self.site_script
        pars['site_name'] = self.site_name
        pars['processes'] = int(opt.processes or self.default_processes)
        pars['threads'] = int(opt.threads or self.default_threads)
        pars['stats_port'] = int(opt.stats_port or port+1000)
        pars['offload_threads'] = int(opt.offload_threads or pars['processes'])
        pars['pidfile_path'] = self.pidfile_path
        pars['logto'] = self.error_path
        pars['gid'] = os.getgid()
        pars['uid'] = os.getuid()
        if boolean(opt.websockets):
            pars['websockets'] = """http-websockets = true
route = ^/websocket httpdumb:%s
attach-daemon = gnrasync %s""" % (self.websocket_socket_path, self.site_name)
        else:
            pars['websockets'] = ''
        if self.gnr_vassal_options:
            pars['gnr_vassal_options'] = '\n'.join(['%s=%s'%(k,v) for k,v in self.gnr_vassal_options.items()])
        else:
            pars['gnr_vassal_options'] = ''
        ini_content = self.vassal_template%pars
        self.pars = pars
        with open(self.vassal_ini_path,'w') as ini_file:
            ini_file.write(ini_content)



    def stop_vassal(self):
        if os.path.exists(self.vassal_ini_path):
            vassal_off_path = os.path.join(self.vassals_path, '%s.off' % self.site_name)
            os.rename(self.vassal_ini_path, vassal_off_path)




if __name__ == '__main__':
    usage = """
    gnrvassal <site_name> will create a uwsgi vassal for the genro site named <site_name>.
    """
    parser = OptionParser(usage)
    parser.add_option('-v', '--verbose',
                  dest='verbose',
                  action='store_true',
                  help="Verbose UWSGI output")    

    parser.add_option('--debug',
                      dest='debug',
                      action='store_true',
                      help="Use weberror debugger")
    parser.add_option('-d','--domain',
                      dest='domain',
                      help="Create vassal for domain specified (port is ignored)")
    parser.add_option('--nodebug',
                      dest='debug',
                      action='store_false',
                      help="Don't use weberror debugger")
    parser.add_option('--profile',
                      dest='profile',
                      action='store_true',
                      help="Use profiler at /__profile__ url")

    parser.add_option('-p', '--port',
                      dest='port',
                      help="Sets server listening port (Default: 8080)")

    parser.add_option('-n', '--noclean',
                      dest='noclean',
                      help="Don't perform a clean (full reset) restart",
                      action='store_true')

    parser.add_option('-g','--gzip',
                      dest='gzip',
                      action='store_true',
                      help="Enable gzip compressions")

    parser.add_option('--remote_edit',
                      dest='remote_edit',
                      action='store_true',
                      help="Enable remote edit")
    parser.add_option('--stop', dest='stop',
                        action='store_true',
                        help="Stop (orphan?) instance")

    (options, args) = parser.parse_args()

    if len(args) < 1:
        parser.print_help()
    else:
        uwsgi_configurator = UwsgiConfigurator(args[0], options=options, verbose=getattr(options,'verbose', True))
        if options.stop:
            uwsgi_configurator.stop_vassal()
        else:
            uwsgi_configurator.write_ini()
