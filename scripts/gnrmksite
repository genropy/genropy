#!/usr/bin/env python
# encoding: utf-8

"""
create a new genrosite from an instance or add it to an existing one
usage: gnrmksite [instanceName, [siteName]]

instanceName defaults to the current directory name
siteName     defaults to instanceName

"""
import sys, os, shutil
import getopt
from gnr.core.gnrbag import Bag
from gnr.app.gnrapp import GnrApp


class SiteMaker(object):
    def __init__(self, paramstring):
        kwargs, args = getopt.getopt(paramstring, '')
        if not args:
            self.instancepath = os.getcwd()
            self.instId = os.path.basename(self.instancepath)
            self.sitepath = '/usr/local/genro/data/sites/%s' % self.instId
        else:
            self.instId = args[0]
            self.instancepath = '/usr/local/genro/data/instances/%s' % self.instId
            
        if len(args) > 1:
            sitename = args[1]
        else:
            sitename = self.instId
        self.sitepath = '/usr/local/genro/data/sites/%s' % sitename
        print 'making site %s from instance %s' %(self.sitepath, self.instancepath)
        
        self.app = GnrApp(self.instancepath)
        
    def do(self):
        self.createSite()
        
        siteconfig = Bag(os.path.join(self.sitepath,'siteconfig.xml'))
        
        destpath = os.path.join(self.sitepath, 'pages')
        if not len(siteconfig['instances']) == 1:
            destpath = os.path.join(destpath, self.instId)
            
        if not os.path.exists(os.path.join(destpath, 'indexwsgi.py')):
            f = file(os.path.join(destpath,'indexwsgi.py'),'w')
            content = """
#!/usr/bin/env python
# encoding: utf-8
from gnr.web.server import Server

if __name__ == '__main__':
    server=Server(__file__)
    server.run()

"""
            f.write(content)
            f.close()
        for pkgId, pkg in self.app.packages.items():
            pagespath = os.path.join(pkg.packageFolder, 'webpages')
            if os.path.exists(pagespath):
                try:
                    os.remove(os.path.join(destpath, pkgId))
                except:
                    pass
                os.symlink(pagespath, os.path.join(destpath,pkgId))
                if not os.path.exists(os.path.join(pagespath, 'index.py')):
                    f = file(os.path.join(pagespath,'index.py'),'w')
                    index_content = """
from gnr.web.gnrwebpage import GnrWebPage,GnrIndexWebPage
def index(req,**kwargs):
    return GnrWebPage(req, GnrIndexWebPage, __file__, **kwargs).index()
                    """
                    f.write(index_content)
                    f.close()
                
        
    def createSite(self):
        path = self.sitepath
        if not os.path.exists(path):
            os.makedirs(path)
        
        
        datapath = os.path.join(path,'data')
        if not os.path.exists(datapath):
            os.makedirs(datapath)

        pagespath = os.path.join(path,'pages')
        if not os.path.exists(pagespath):
            os.makedirs(pagespath)
        
        libpath = os.path.join(path,'pages', '_lib')
        try:
            os.remove(libpath)
        except:
            pass
        os.symlink('/usr/local/genro/lib', libpath)
        
        if not os.path.exists(os.path.join(pagespath, 'index.py')):
            f = file(os.path.join(pagespath,'index.py'),'w')
            f.write('from gnr.web.gnrwebpage import indexFolder as index')
            f.close()


        

        confpath = os.path.join(path,'siteconfig.xml')
        if not os.path.exists(confpath):
            siteconfig = Bag()
            siteconfig.setItem('instances.%s' % self.instId, None, path=self.instancepath)
            siteconfig['connection_timeout'] = None
            siteconfig['connection_refresh'] = None
            siteconfig.setItem('dojo', None, version='11')
            siteconfig.toXml(confpath)
    
if __name__ == '__main__':
    mk = SiteMaker(sys.argv[1:])
    mk.do()
    
    