#!/usr/bin/env python
# encoding: utf-8

"""
create a new genroproject
usage: gnrmkproject projectname

"""
import sys, os

from gnr.core.gnrbag import Bag
from optparse import OptionParser
from gnr.core.gnrsys import expandpath
import glob
import grp


def site_name_to_path(site_name, gnr_config=None):
    path_list = []
    if 'sites' in gnr_config['gnr.environment_xml']:
        path_list.extend([(expandpath(path), site_template) for path, site_template in
                          gnr_config['gnr.environment_xml.sites'].digest('#a.path,#a.site_template') if
                          os.path.isdir(expandpath(path))])
    if 'projects' in gnr_config['gnr.environment_xml']:
        projects = [(expandpath(path), site_template) for path, site_template in
                    gnr_config['gnr.environment_xml.projects'].digest('#a.path,#a.site_template') if
                    os.path.isdir(expandpath(path))]
        for project_path, site_template in projects:
            sites = glob.glob(os.path.join(project_path, '*/sites'))
            path_list.extend([(site_path, site_template) for site_path in sites])
    for path, site_template in path_list:
        site_path = os.path.join(path, site_name)
        if os.path.isdir(site_path):
            return site_path
    print 'Error: no site named %s found'

def load_gnr_config():
    if sys.platform == 'win32':
        config_path = '~\gnr'
    else:
        config_path = '~/.gnr'
    config_path  = expandpath(config_path)
    if os.path.isdir(config_path):
        gnr_config = Bag(config_path)
    else:
        gnr_config = Bag()
    return gnr_config

def set_environment(gnr_config):
    for var, value in gnr_config['gnr.environment_xml'].digest('environment:#k,#a.value'):
        var = var.upper()
        if not os.getenv(var):
            os.environ[str(var)] = str(value)

def build_apache_site(site_name, apache_path='/etc/apache2/sites-available/', 
                    process_name=None, user=None, filename=None,
                      group=None, tmp_path='/tmp', threads=4,
                      admin_mail=None, port=80, domain=None,
                      processes=8, maximum_requests=700, base_url='/'):
    gnr_config = load_gnr_config()
    set_environment(gnr_config)
    site_path = site_name_to_path(site_name, gnr_config=gnr_config)
    if os.path.exists(os.path.join(site_path,'root.wsgi')):
        script_name = 'root.wsgi'
    else:
        script_name = 'root.py'
    params = dict(process_name=process_name or 'gnr_%s' % site_name,
                  domain=domain,
                  user=user,
                  group=group,
                  tmp_path=tmp_path or '/tmp',
                  threads=str(threads), # Transform threads, maximum_requests and processes to str to accept both int and str as args
                  maximum_requests=str(maximum_requests),
                  processes=str(processes),
                  base_url=base_url,
                  admin_mail=admin_mail or 'genro@%s' % domain,
                  site_path=site_path,
                  script_name=script_name,
                  port=str(port)
                  )
    params['process_env'] = 'ENV_%s' % params['process_name'].upper()
    apache_file_content = """<VirtualHost *:80>
            ServerName %(domain)s
            ServerAdmin %(admin_mail)s
            DocumentRoot /var/www
            WSGIDaemonProcess %(process_name)s user=%(user)s group=%(group)s python-eggs=%(tmp_path)s threads=%(threads)s processes=%(processes)s maximum-requests=%(maximum_requests)s
            SetEnv %(process_env)s %(process_name)s
            WSGIProcessGroup %%{ENV:%(process_env)s}
            # modify the following line to point your site
            WSGIScriptAlias %(base_url)s %(site_path)s/%(script_name)s
            <Directory %(site_path)s>
                Options Indexes FollowSymLinks
                AllowOverride All
                Order allow,deny
                Allow from all
            </Directory>
            ErrorLog %(site_path)s/error.log
    </VirtualHost>
    """ % params
    print apache_file_content
    #outpath= os.path.join(apache_path, filename)
    # #if os.path.exists(outpath):
    #    print 'A file named %s already exists' % filename
    #else:
        
        #with open(outpath) as outfile:
        #    outfile.write(apache_file_content)
        #print '%s created' % outpath


if __name__ == '__main__':
    usage = """
    gnrmkapachesite <site_name> <domain_name> will output an apache site configuration file.
    example usage:
    gnrmkapachesite genro www.genro.org > genro_site
    will write the correct apache configuration for 'genro' site in genro_site
    then copy genro_site to /etc/apache2/sites-available:
    sudo cp genro_site /etc/apache2/sites-available
    then enable it:
    sudo a2ensite genro_site
    and finally restart apache:
    sudo apache2ctl restart
    """
    current_user = os.getlogin()
    gid = os.getgid()
    current_group = grp.getgrgid(gid)[0]
    
    parser = OptionParser(usage)
    parser.add_option("-f", "--force", dest="force", action='store_true', default=False,
                      help="force the resource creation also if destination file exists")
    parser.add_option("-u", "--user", dest="user",default=current_user,
                       help="user for wsgi process execution")
    parser.add_option("-g", "--group", dest="group",default=current_group,
                  help="group for wsgi process execution")
    parser.add_option("-P", "--port", dest="port", default=80,
                  help="port for virtualserver")
    parser.add_option("-a", "--apache", dest="apache", default='/etc/apache2/sites-available/',
                  help="port for virtualserver")
    parser.add_option("-p", "--processes", dest="processes", default=8,
                  help="max processes")
    parser.add_option("-t", "--threads", dest="threads", default=4,
                        help="max threads")
    parser.add_option("-r", "--maximum_requests", dest="maximum_requests", default=700,
                        help="max requests per process")
    
    (options, args) = parser.parse_args()
    option_force = getattr(options, 'force', False)
    option_output = getattr(options, 'output', None)
    user = getattr(options, 'user', None)
    group  = getattr(options, 'group', None)
    port = getattr(options, 'port', None)
    processes = getattr(options, 'processes', None)
    threads = getattr(options, 'threads', None)
    maximum_requests = getattr(options, 'maximum_requests', None)
    if  len(args)<2:
        parser.print_help()
    else:
        build_apache_site(args[0],domain=args[1], user=user,
          group=group, threads=threads, processes=processes, maximum_requests=maximum_requests, port=port)
        
