#!/usr/bin/env python
# encoding: utf-8

"""
create a new genroproject
usage: gnrmkproject projectname

"""

from gnr.core.gnrbag import Bag
from optparse import OptionParser
from gnr.app.gnrconfig import gnrConfigPath, getSiteHandler, getGnrConfig
import subprocess
import atexit
import signal
import os
from gnr.core.gnrstring import boolean
import time

wsgi_options = dict(
        port=8080,
        host='0.0.0.0',
        reload=False,
        debug=True,
        restore=False,
        profile=False,
        noclean=False,
        source_instance=None,
        remote_edit=None,
        remotesshdb=None,
        gzip=None,
        processes=1,
        threads=1,
        offload_threads=None,
        stats_port=None,
        websockets=False
        )



class UwsgiRunner(object):
    default_port = 8080
    default_processes = 1
    default_threads = 8
    vassal_template = """[uwsgi]
http = :%(port)i
;wsgi-file = %(wsgi_file)s
processes = %(processes)i
threads = %(threads)i
enable-threads = true
stats = 127.0.0.1:%(stats_port)i
worker-reload-mercy = 1
disable-logging = true
module = gnr.web.serveruwsgi
pyargv = %(site_name)s
offload-threads = %(offload_threads)i
wsgi-env-behaviour = holy
pidfile = %(pidfile_path)s
%(websockets)s
"""

    def __init__(self, site_name, options=None, verbose=None):
        self.site_name = site_name
        self.site_handler = getSiteHandler(site_name)
        self.site_path = self.site_handler['site_path']
        self.site_template = self.site_handler['site_template']
        self.site_script = self.site_handler['site_script']
        self.gnr_config = getGnrConfig()
        self.site_config = self.get_config()
        self.gnr_path = gnrConfigPath()
        self.socket_path = os.path.join(self.gnr_path, 'sockets')
        self.vassals_path = os.path.join(self.gnr_path, 'uwsgi', 'vassals')
        self.pidfile_path = os.path.join(self.vassals_path, '%s.pid' % site_name)
        self.vassal_ini_path = os.path.join(self.vassals_path, '%s.ini' % site_name)
        self.websocket_socket_path = os.path.join(self.socket_path, '%s.tornado' % site_name)
        self.create_dirs()
        self.verbose = verbose
        self.options = options
        self.init_options()

    def init_options(self):
        options = self.options.__dict__
        for option in wsgi_options.keys():
            if options.get(option, None) is None: # not specified on the command-line
                site_option = self.site_config['wsgi?%s' % option]
                value = site_option or wsgi_options.get(option)
                self.options.__dict__[option] = value
            
            else:  
                env_key = 'GNR_%s_%s'%(self.site_name.upper(), option.upper())
                if value is not None:
                    os.environ[env_key] = str(value)

    def create_dirs(self):
        for dir_path in (self.socket_path, self.vassals_path):
            if not os.path.exists(dir_path):
                os.makedirs(dir_path)

    def get_config(self):
        site_config_path = os.path.join(self.site_path, 'siteconfig.xml')
        base_site_config = Bag(site_config_path)
        site_config = self.gnr_config['gnr.siteconfig.default_xml'] or Bag()
        template = self.site_template
        if template:
            site_config.update(self.gnr_config['gnr.siteconfig.%s_xml' % template] or Bag())
        site_config.update(base_site_config)
        return site_config

    def write_ini(self):
        pars = dict()
        #sc = self.site_config
        opt = self.options
        pars['port'] = int(opt.port or self.default_port)
        pars['wsgi_file'] = self.site_script
        pars['site_name'] = self.site_name
        pars['processes'] = int(opt.processes or self.default_processes)
        pars['threads'] = int(opt.threads or self.default_threads)
        pars['stats_port'] = int(opt.stats_port or pars['port']+1000)
        pars['offload_threads'] = int(opt.offload_threads or pars['processes'])
        pars['pidfile_path'] = self.pidfile_path
        if boolean(opt.websockets):
            pars['websockets'] = """http-websockets = true
route = ^/websocket httpdumb:%s
attach-daemon = gnrasync %s""" % (self.websocket_socket_path, self.site_name)
        else:
            pars['websockets'] = ''
        ini_content = self.vassal_template%pars
        self.pars = pars
        with open(self.vassal_ini_path,'w') as ini_file:
            ini_file.write(ini_content)

    def print_pars(self):
        out ="""Starting UWSGI server on port %(port)i

Processes:\t\t%(processes)i
Thread:\t\t\t%(threads)i
Stats on:\t\thttp://127.0.0.1:%(stats_port)i
Connect on:\t\thttp://127.0.0.1:%(port)i"""%self.pars
        print out

    def run(self):
        uwsgi_args = ['uwsgi', self.vassal_ini_path]
        self.stop_from_pidfile()
        if not self.verbose:
            with open(os.devnull, 'w') as fp:
                self.uwsgi_master = subprocess.Popen(uwsgi_args,stderr=fp)
        else:
            self.uwsgi_master = subprocess.Popen(uwsgi_args)
        atexit.register(self.stop)
        self.print_pars()
        self.uwsgi_master.wait()

    def stop_from_pidfile(self):
        if os.path.exists(self.pidfile_path):
            with open(os.devnull, 'w') as fp:
                uwsgi_stopper = subprocess.Popen(['uwsgi','--stop',self.pidfile_path],stderr=fp)
                uwsgi_stopper.wait()
                os.remove(self.pidfile_path)
                time.sleep(1)

    def stop(self):
        self.uwsgi_master.terminate()
        os.remove(self.pidfile_path)
        #self.uwsgi_master.send_signal(signal.SIGINT)



if __name__ == '__main__':
    usage = """
    gnruwsgi <site_name> will run a genro site named <site_name> using uwsgi.
    """
    parser = OptionParser(usage)
    parser.add_option('-v', '--verbose',
                  dest='verbose',
                  action='store_true',
                  help="Verbose UWSGI output")    

    parser.add_option('--debug',
                      dest='debug',
                      action='store_true',
                      help="Use weberror debugger")

    parser.add_option('--nodebug',
                      dest='debug',
                      action='store_false',
                      help="Don't use weberror debugger")
    parser.add_option('--profile',
                      dest='profile',
                      action='store_true',
                      help="Use profiler at /__profile__ url")

    parser.add_option('-p', '--port',
                      dest='port',
                      help="Sets server listening port (Default: 8080)")

    parser.add_option('-n', '--noclean',
                      dest='noclean',
                      help="Don't perform a clean (full reset) restart",
                      action='store_true')

    parser.add_option('-g','--gzip',
                      dest='gzip',
                      action='store_true',
                      help="Enable gzip compressions")

    parser.add_option('--remote_edit',
                      dest='remote_edit',
                      action='store_true',
                      help="Enable remote edit")
    parser.add_option('--stop', dest='stop',
                        action='store_true',
                        help="Stop (orphan?) instance")

    (options, args) = parser.parse_args()

    if len(args) < 1:
        parser.print_help()
    else:
        uwsgi_runner = UwsgiRunner(args[0], options=options, verbose=getattr(options,'verbose', True))
        if options.stop:
            uwsgi_runner.stop_from_pidfile()
        else:
            uwsgi_runner.write_ini()
            uwsgi_runner.run()
