Abilitato in /etc/apt/sources.list le repositories universe levando il commento

reference: http://wiki.ubuntu-it.org/AmministrazioneSistema/Apt

ssh ipdelsito -l root

apt-get update
apt-get upgrade
apt-cache search string elenca i pacchetti che hanno una relazione con quella stringa
apt-get install nomepacchetto installa il pacchetto

PER NOI 

CON APT-GET
apt-get install libapache2-mod-wsgi
apt-get install postgresql
apt-get install build-essential
apt-get install subversion
apt-get install python-psycopg2
apt-get install python-setuptools
apt-get install python-dev 
apt-get install python-reportlab
apt-get install python-qt4  
apt-get install libxml2-dev libxslt-dev
apt-get install libcups2-dev wget cups cups-client

MEGAPAROLAMAGICA
apt-get install libapache2-mod-wsgi postgresql build-essential subversion python-psycopg2 python-setuptools python-dev python-reportlab python-qt4 libxml2-dev libxslt-dev libcups2-dev wget cups cups-client

CON EASYINSTALL
easy_install -U -Z paver 
easy_install -U -Z babel pytz vobject
easy_install -U -Z paste webob weberror
easy_install -U -Z mako
easy_install -U -Z pypdf
easy_install -U -Z z3c.rml
easy_install -U -Z ipython

MEGAPAROLAMAGICA
easy_install -U -Z paver babel pytz vobject paste webob weberror mako pypdf z3c.rml ipython


CONSIGLIATO
adduser genro
visudo (copio root e gli metto il nome genro)

mettergli una password molto sicura

loggati nuovamente via ssh come utente genro

[genro]
svn co http://svn.genropy.org/genro/trunk genro
cd genro/gnrpy
sudo paver develop

mkdir ~/progetti
cd ~/progetti
svn co http://...../progetto

sudo -u postgres psql
postgres=# \password

(nuova pass dell'utente postgres solitamente postgres o postgnr)

postgres=# \q

copio nella home di genro la cartella .gnr
edito i path

[pycups]
wget http://cyberelk.net/tim/data/pycups/pycups-1.9.46.tar.bz2
tar xvfj pycups-1.9.46.tar.bz2
cd pycups-1.9.46
make
sudo make install

[screen]
apt-get install screen
con il comando screen si effettua un fork della sessione corrente, i comandi lanciati in quasta nuova sessione 
sopravvivono alla chiusura della sessione ssh.
Per tornare alla vista normale ctrl-a seguito da d.
per riaprire lo schermo con i processi in esecuzione: screen -r
man screen è amico.

[Leggere i log]
less /var/log/apache2/error.log (legge dall'inizio del file. q per uscire)
tail -n NUMEROLINEE /var/log/apache2/error.log (legge NUMEROLINEE alla fine del file.)
tail -n NUMEROLINEE  -f /var/log/apache2/error.log (legge NUMEROLINEE alla fine del file e mantiene aperto il file in modo che aggiornamenti allo stesso siano immediatamente visualizzati. Ctrl-C per uscire)

[/etc/apache2/sites-available]


<VirtualHost *:80> 
# *:80 indica la coppia indirizzo porta a cui il virtualhost risponde
# se si volesse che il server, con ipotetico indirizzo 192.168.1.1, rispondesse solo
# alla rete locale sulla porta 8080 si scriverebbe <VirtualHost 192.168.1.1:8080>
        ServerAdmin webmaster@localhost
# Indirizzo di posta che viene stampato nei messaggi di errore standard di Apache
        DocumentRoot /var/www
# Path dove apache cerca i documenti, a noi non interessa particolarmente,
# Ci interesserebbe solo se avessimo personalizzato le pagine 404 o 500 come
# pagine statiche di apache
        WSGIDaemonProcess gnr user=genro group=genro python-eggs=/tmp threads=25
# Definisce un processo daemon WSGI:
# user e group indicano lo user e il gruppo di esecuzione di tal processo (standard sarebbero stati www-data:www-data)
# python-eggs indica il path dove espandere gli egg compressi, deve essere un path scrivibile dall'utente specificato prima
#      solitamente /tmp è scrivibile da tutti
# threads indica il numero di thread massimi per ogni processo WSGI
# processes indica il numero di processi massimi, omettendolo si limita al singleprocess
        SetEnv PROCESS_GROUP gnr
# Setta una variabile di ambiente di Apache
        WSGIProcessGroup %{ENV:PROCESS_GROUP}
# Specifica che questo virtualhost deve essere servito dal processo WSGI specificato prima
        # modify the following line to point your site
        WSGIScriptAlias / /home/genro/progetti/mmusic/sites/provarci/root.py
# Associa un path di apache a un file root.py (contenuto nella directory del sito) che deve rispondere
# Il path di apache deve essere uguale al home_uri specificato nel siteconfig.xml
        <Directory /home/genro/progetti/mmusic/sites/provarci>
            Options Indexes FollowSymLinks
            AllowOverride All
            Order allow,deny
            Allow from all
        </Directory>
# Tutta la sezione directory serve a specificare che la cartella del sito deve essere leggibile dall'esterno
</VirtualHost>