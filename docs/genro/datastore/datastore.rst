	.. _genro-datastore:

===========
 Datastore
===========

	- :ref:`datastore-description`

	- :ref:`datastore-syntax`

	- :ref:`datastore-access`

	- :ref:`datastore-debugger`

	.. _datastore-description:

Description
===========

	The datastore is a Genro bag called and it's used to keep track of data.

	You can access to it from any Genro webpage through the debugger by clicking ``ctrl+shift+D``.

	Through various python commands, you can attach the javascript code to the events of the components interface or events generated by the datastore.

	.. _datastore-syntax:

Datastore syntax
================

	The path followed by the syntax in the datastore:

	* ``path.absolute.in.datastore``
	* ``.path.relative.in.datastore``
	* ``#ID.path.relative.to.the.ID``

	The path indicates the access path to data to every element of the datastore (it is implemented by reading the Bag interface, and thus includes many things: for example, you can also specify the CSS classes of an HTML element linking them to an element of the datastore), using the prefixes:

	* "^" (circumflex accent): ``^access.to.resolver``, setting an observer at this node. The component will be informed of changes to the datastore
	* equal: ``=accessed.from.resolver``, reads the contents of the datastore.

	.. _datastore-access:

Access to the datastore from javascript
=======================================

	The possible operations on the datastore include:

	**SET**:
		sets a value and triggers any associated events (ie any observers or resolver connected by "^")
	**PUT**:
		sets a value, but does not trigger the events associated
	**GET**:
		reads the contents of a value in the datastore
	**FIRE**:
		sets a value in the datastore, and then triggers the events associated, and then resets the value to zero (without triggering events). It is used when you need to trigger events through a temporary parameter to the Observers.

	These operations can be specified in the javascript events associated with an interface, and the framework deals gnrjs to the expansion of these macros. It can be accessed from its datastore javascript code (ie from code written in .JS file and then read without macro-expansion) using simple javascript functions.

	.. _datastore-debugger:

Debugger
========

	??? Explain ALL the folders contained in the debugger (ctrl+shift+D).
