===========
 datastore
===========

Index:
******

	**Datastore and and the Javascript code of Genro**

		- Description_

		- Sintax_

		- Example_

	**Datapath and value**

		- Descriptions_

		- Validity_

		- Default_

		- Examples_

Datastore
=========

.. _Description:

**Description:**

	The datastore is a Genro bag and it's used to keep track of data.

	Through various python commands, you can attach the javascript code to the events of the components interface or events generated by the datastore.

.. _Sintax:

**Syntax for datapath:**

	The path followed by the syntax in the datastore:

	* ``path.absolute.in.datastore``
	* ``.path.relative.in.datastore``
	* ``#ID.path.relative.to.the.ID``

	The path indicates the access path to data to virtually every element of the datastore (it is implemented by reading the Bag interface, and thus includes many things: for example, you can also specify the CSS classes of an HTML element linking them to an element of the datastore), using the prefixes:

	* "^" (circumflex accent): ``^access.to.resolver``, setting an observer at this node. The component will be informed of changes to the datastore
	* equal: ``=accessed.from.resolver``, reads the contents of the datastore.

Access to the datastore from javascript
***************************************

	The possible operations on the datastore include:

	**SET**:
		sets a value and triggers any associated events (ie any observers or resolver connected by "^")
	**PUT**:
		sets a value, but does not trigger the events associated
	**GET**:
		reads the contents of a value in the datastore
	**FIRE**:
		sets a value in the datastore, and then triggers the events associated, and then resets the value to zero (without triggering events). It is used when you need to trigger events via a temporary parameter to the Observers.

	These operations can be specified in the javascript events associated with an interface, the framework deals gnrjs to the expansion of these macros. It 'can be accessed from its datastore javascript code (ie from code written in .JS file and then read without macro-expansion) using simple javascript functions.

.. Example:

**Examples:**



Datapath and value
==================

.. _Description:

- Description: datapath is an attribute used to create a hierarchy of your data's addresses.

.. _Validity:

**Validity:**

	You can give "datapath" attribute to each object, but it is useful give this attribute only to the objects that contain other objects (so give this attribute to container objects).

.. _Default:

** Default value:** None

.. _Examples:

**Examples:**

	Example::

		pane.borderContainer(datapath='rootPathOfData')

	Let's see an example::

		box = pane.div(datapath='father')   (this div is the father, and datapath carries an absolute path)
		box.textbox(value='^.son')          (this textbox is the son)

	If you want to create a son with an absolute path, you simply mustn't write the dot at the beginning of son's datapath, like::

		box.textbox(value='^.another_son',datapath='father_2') (this datapath will have an absolute path)

	You can also create a datapath with a relative path; for doing this you have to put the dot at the beginning of son's datapath, like::

		box.textbox(value='^.another_son',datapath='.father_2') (this datapath will inherit from the previous datapath)

	Pay attention to not create a relative path without an absolute path as father!

	Example::

		def test_1_basic(self,pane):
		    """Standard datapath"""
		    pane.div("""Simple example of datapath. In the first line "datapath='father'" is
		    an absolute path; in the following two rows there are two textbox with
		    a relative path linked to "father" ("value" attribute).
		    The last four rows (that begins with "box2") described a similar example:
		    even in this case the "datapath='job'" is an absolute path.
		    Try to type something in textbox and retrieve it in Datasource (to open Datasource use
		    "SHIFT+CTRL+D".)""",
		    font_size='.9em',text_align='justify')
		    box = pane.div(datapath='father')
		    box.textbox(value='^.son')
		    box.textbox(value='^.son_2')
		    pane.br()
		    box2 = pane.div(datapath='job')
		    box2.textbox(value='^.profession')
		    box2.textbox(value='^.company_name')
		    box2.textbox(value='^.fiscal_code')

	Example::

		def test_2_abs_rel(self,pane):
		    """Absolute and relative paths"""
		    pane.div("""In this test you can see how datapath can build a relative path or an absolute
		    path (use datasource).
		    In the first two lines, like test_1, there is a datapath with an absolute path
		    (datapath='goofy') and a son of the datapath (textbox with mario's value).
		    In the third line we use datapath ('pancrazio') in a textbox with the meaning of
		    absolute path, WHILE in the forth line we use datapath with the meaning of rela-
		    tive path, and that's caused by the dot that precedes the address ('.luigi') """,
		    font_size='.9em',text_align='justify')
		    box = pane.div(datapath='goofy')
		    box.textbox(value='^.mario')
		    box.textbox(value='^.anthony',datapath='luigi')
		    box.textbox(value='^.anthony',datapath='.luigi')
